# page_components/Dog_Page.py
import streamlit as st
from typing import List, Dict
from pet_pages_common import render_pet_detail_page

# ---------- Inline data for "best friends" ----------
# Use lowercase keys; we'll normalize incoming names.
_FRIENDS: Dict[str, List[str]] = {
    "ace": ["Brody","Ë±ÜÂåÖ","ÂôóÂôó","Â±ÅÂ±Å","ÁöÆÂç°‰∏ò","Chippy","Brody","ÂèØ‰πê1","Papaya","Madi"],
    "appa": ["shyshy"],
    "angus": ["kylie"],
    "archie": ["brownie","luna"],
    "baggie": ["archie","luna"],
    "beanie": ["Â•∂Ê≤π"],
    "bentley": ["Ê≠áÊ≠á"],
    "boston": [],
    "brody": ["ace"],
    "brownie": ["luna","archie"],
    "buster": ["kylie"],
    "chippy": ["ace"],
    "coco": ["tora"],
    "coco1": ["cola"],
    "cocoa": [],
    "coconut": [],
    "cola": ["coco1","momo"],
    "cookie": ["opao"],
    "cotton": ["kylie","Â±ÅÂ±Å"],
    "debby": [],
    "dobby": ["athena"],
    "donny": ["kylie","summer","oliver1","rusty"],
    "dutch": ["opao","mocha1"],
    "easton": [],
    "eddie": [],
    "emily": ["Ê§∞Ê§∞"],
    "gogo": [],
    "jemma": ["pi"],
    "kendrick": [],
    "kia": ["ÊûúÊûú","shyshy"],
    "kylie": ["donny","oliver1","madi"],
    "laffy": [],
    "liberty": [],
    "lulu": ["oliver1"],
    "luna": ["archie","brownie"],
    "madi": ["kylie","dutch","ace","Ë±ÜÂåÖ"],
    "mason": ["turbo"],
    "melo": [],
    "migo": ["indigo","draco"],
    "millie": ["rolie"],
    "milo": [],
    "milo2": [],
    "mocha": ["Â∏É‰∏Å1"],
    "mocha1": ["opao","dutch","ËæõÂ∑¥"],
    "molly": ["penny","motley","nyxey"],
    "momo": ["rocket","bubble"],
    "money": ["Ê§∞Ê§∞"],
    "motley": ["molly","penny","nyxey"],
    "murphy": [],
    "nato": ["shyshy"],
    "oliver": [],
    "oliver1": ["donny","kylie","lulu"],
    "onami": [],
    "opao": ["cookie","mocha1","ËæõÂ∑¥"],
    "pangda": ["pangky"],
    "pangky": ["pangda"],
    "papaya": ["ace"],
    "penny": ["nyxey","motley","molly"],
    "pi": ["jemma"],
    "rolie": ["millie"],
    "romeo": [],
    "rosie": [],
    "rusty": ["donny","summer"],
    "shyshy": ["appa","kia","nato"],
    "summer": ["summer","rusty","ÊãâÊãâ"],
    "toffee": ["kylie"],
    "turbo": ["mason"],
    "uni": [],
    "wolfie": ["ËÉñËôé"],
    "wuhu": [],
    "‰æù‰æù": ["kylie"],
    "ÂèØ‰πê": [],
    "ÂèØ‰πê1": ["kylie"],
    "Âí™Ë±Ü": [],
    "ÂôóÂôó": ["ace"],
    "Â§ñÂåÖËÖäËÇ†": [],
    "Â•∂Ê≤π": ["beanie","ÁöÆÂç°‰∏ò"],
    "ÂÆâÂÆâ": [],
    "Â±ÅÂ±Å": ["ÁöÆÂç°‰∏ò","cotton"],
    "Â∏É‰∏Å": ["dobby"],
    "Â∏É‰∏Å1": ["mocha","Ê§∞Ê§∞","Ê≠áÊ≠á"],
    "Â∏ÖÂì•": [],
    "ÊãâÊãâ": ["summer"],
    "Êõ≤Â•á": ["ËÉñËôé"],
    "Êù°Êù°": ["kylie"],
    "ÊûúÊûú": ["kia"],
    "Ê†óÂ≠ê": [],
    "Ê†óÂ≠ê1": ["kylie","donny"],
    "Ê§∞Ê§∞": ["Ê≠áÊ≠á"],
    "Ê≠áÊ≠á": ["Ê§∞Ê§∞"],
    "Ê≥°Ëèú": [],
    "Ê≥¢Â¶û": ["summer","madi"],
    "Ê¥æÊ¥æ": [],
    "Áôæ‰∫ø": ["ace"],
    "ÁöÆÂç°‰∏ò": ["Â±ÅÂ±Å","cotton","Â•∂Ê≤π"],
    "ËÉñËôé": ["Êõ≤Â•á","wolfie"],
    "Ë±ÜÂåÖ": ["madi","donny"],
    "ËæõÂ∑¥": ["opao","mocha1"],
    "Èõ™Âìà": [],
    "È∫ªËñØ": ["Â∞è‰∏É","Á¶èÊù•"],
}

def _get_dog_story(name: str) -> str:
    """Return EN/ZH story HTML or plaintext (handled by pet_pages_common)."""
    try:
        import importlib
        from .stories import dog_stories  # keep stories external if you like
        importlib.reload(dog_stories)
        return dog_stories.get_story(name)
    except Exception:
        return ""  # fallback handled upstream

def _get_dog_friends(name: str) -> List[str]:
    """Return a list of friend names shown as avatar chips under the card."""
    key = (name or "").strip().lower()
    return _FRIENDS.get(key, [])

def main(dog_name: str):
    render_pet_detail_page(
        person_name=dog_name,
        bucket="annablog",
        root_prefix="images/dogtopia",
        title_text=f"üê∂ Story of {dog_name.capitalize()}",
        page_param="dog",
        back_page="dogtopia",
        story_getter=_get_dog_story,
        friends_getter=_get_dog_friends,  # ‚Üê chips below the scrollable text box
        # (optional) if you parameterized card heights:
        # max_photos=10,
    )

if __name__ == "__main__":
    q = st.query_params.get("dog") if hasattr(st, "query_params") else None
    val = q[0] if isinstance(q, list) else (q if isinstance(q, str) else None)
    if val:
        main(val)
    else:
        st.info("Pass ?page=dog&dog=Name in the URL.")
